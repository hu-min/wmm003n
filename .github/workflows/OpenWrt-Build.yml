name: 编译OpenWrt固件
# 触发选项
on:
  #  push:
  #    branches:
  #      - master
  #    paths:
  #      - '.config'
  # schedule:
  #    - cron: 0 0 1/3 * *
  # 点击触发
  watch:
    types: started
# 环境定义
env:
  #####################################################
  #####   1：编译官方源码
  #####   2：编译第三方源码
  #####   3：编译官方源码 & 第三方 Package
  #####################################################
  REPO_URL: https://github.com/openwrt/openwrt.git
  ## REPO_URL: https://github.com/coolsnowwolf/lede.git
  ## REPO_URL: https://github.com/Lienol/openwrt.git
  REPO_BRANCH: v19.07.6
  DIY0_FILE: DIY0.sh
  DIY1_FILE: DIY1.sh
  CONF_FILE: wmm003n
  PKG_LEAN: true
  PKG_LIENOL: true
  SSH_ACTION: true
  UPLOAD_RELEASE: false
  UPLOAD_FIRMWARE: true
  #####################################################

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      # 项目初始
      - name: Code Checkout
        uses: actions/checkout@main

      # 空间清理
      - name: Space Cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /swapfile /etc/apt/sources.list.d /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          echo "======================="
          df -h
          echo "======================="

     # 下载源码
      - name: Clone Code
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

     # 下载插件
      - name: Download Lean Package
        if: env.PKG_LEAN == 'true' && env.REPO_URL != 'https://github.com/coolsnowwolf/lede.git'
        run: |
          cd openwrt
          sudo rm -rf package/lean
          mkdir -p package/lean
          svn checkout https://github.com/coolsnowwolf/lede/trunk/package/lean/ package/lean
          sudo rm -rf package/lean/.svn/

          mkdir -p tools/ucl && wget -P tools/ucl https://raw.githubusercontent.com/coolsnowwolf/lede/master/tools/ucl/Makefile 
          mkdir -p tools/upx && wget -P tools/upx https://raw.githubusercontent.com/coolsnowwolf/lede/master/tools/upx/Makefile

          sed  -i '/tools-$(CONFIG_TARGET_orion_generic)/atools-y += ucl upx' tools/Makefile
          sed  -i '/dependencies/a\\$(curdir)/upx/compile := $(curdir)/ucl/compile' tools/Makefile

     # 下载插件
      - name: Download Lienol Package
        if: env.PKG_LIENOL == 'true' && env.REPO_URL != 'https://github.com/Lienol/openwrt.git'
        run: |
          cd openwrt
          echo "src-git yfdoor9 https://github.com/Lienol/openwrt-package" >> feeds.conf.default

      # 自定插件
      - name: Download My Package
        run: |
          chmod +x script/$DIY0_FILE
          cd openwrt
          ../script/$DIY0_FILE

      # 更新Feed
      - name: Update Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          pushd feeds/packages/lang
          sudo rm -rf golang
          svn co https://github.com/openwrt/packages/trunk/lang/golang
          popd

      # 配置文件
      - name: Config File
        run: |
          [ -e files ] && cp -r -f files openwrt/files
          [ -e config/$CONF_FILE ] && cp -r -f config/$CONF_FILE openwrt/.config
          chmod +x script/$DIY1_FILE
          cd openwrt
          ../script/$DIY1_FILE
          make defconfig

      # SSH连接
      - name: SSH Connection
        if: env.SSH_ACTION == 'true'
        uses: hu-min/debugger-action@master

      # 下载依赖
      - name: Make Download
        run: |
          cd openwrt
          make download -j8
          find dl/ -size -1024c -exec rm -f {} \;

      # 编译固件
      - name: Compile Firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          echo "::set-output name=status::success"

      # 准备固件
      - name: Organize Artifact
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin
          find ./targets/ -type d -name "packages" | xargs rm -rf {}
          zip -r OpenWrt_Firmware.zip targets
          date=$(TZ=UTC-8 date +"%Y.%m.%d")
          echo "RELEASE_DATE=$date" >> $GITHUB_ENV
          # echo ::set-env name=RELEASE_DATE::"$(TZ=UTC-8 date +"%Y.%m.%d")"

      # 上传固件
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_Firmware_${{ env.CONF_FILE }}
          path: ./openwrt/bin/targets/

      # 创建发行
      - name: Create Release
        id: create_release
        uses: actions/create-release@main
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_DATE }}_TAG
          release_name: OpenWrt_${{ env.CONF_FILE }}_${{ env.RELEASE_DATE }}
          body: |
            1、本固件为自动编译
            2、发行版中只提供完整的固件
            3、需要单独IPK请到分支下载
            4、源码：${{ env.REPO_URL }}
            5、分支：${{ env.REPO_BRANCH }}
            6、Lean's package option：${{ env.PKG_LEAN }}
            7、Lienol's package option：${{ env.PKG_LIENOL }}
            -- Build by hu-min @ with Github Action on ${{ env.RELEASE_DATE }}
            -- Automated build | 自动编译
          draft: false
          prerelease: false

      # 上传发行
      - name: Upload Release
        uses: actions/upload-release-asset@main
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./openwrt/bin/OpenWrt_Firmware.zip
          asset_name: OpenWrt_${{ env.CONF_FILE }}_${{ env.RELEASE_DATE }}.zip
          asset_content_type: application/zip
